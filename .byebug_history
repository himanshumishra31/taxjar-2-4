c
taxjar_applicable?(self)
Spree::Config[:taxjar_enabled]
c
has_nexus?
c
taxjar_applicable?(self)
Spree::Config[:taxjar_enabled]
c
read_attribute(:label)
c
read_attribute(:label)
c
read_attribute(:label)
c
read_attribute(:label)
read_attribute(:label
c
(eval("source").amount.to_f * 100).to_s + "%"
(eval("source").amount.to_f * 100).to_s
eval("source").amount.to_f * 100
eval("source").amount.to_f
eval("source").amount
read_attribute(:label)
self
read_attribute(:label)
eval("source")
read_attribute(:label
eval("source").class == Spree::TaxRate
c
eval("source").class == Spree::TaxRate
eval("source").class 
eval("source")
self
c
eval("source")
self
c
self
c
self
c
source.calculator.type
eval("source").adjustments
adjustments
eval("source").tax_rates
adjustable.tax_rates
adjustable.tax_rate
adjustable.tax_Rate
adjustable
tax_Rate
eval("source").tax_rate
eval("source")
source
eval("source")
self
order
eval("source")
adjustable
self
eval("source")
eval("source").tax_rate
tax_rate
Spree::Adjustment
eval("source").adjustmnet
eval("source")
source
c
read_attribute(:label) + ((order.additional_tax_total/order.amount) * 100).to_f.round(2).to_s
read_attribute(:label) + ((order.additional_tax_total/order.amount) * 100).to_f.round(2)
read_attribute(:label) + ((order.additional_tax_total/order.amount) * 100).to_f.to_s
read_attribute(:label) + ((order.additional_tax_total/order.amount) * 100).to_f
((order.additional_tax_total/order.amount) * 100).to_f
((order.additional_tax_total/order.amount) * 100)
eval("source")
source
adjustable
tax_rate
self
exit
c
read_attribute(:label)
read_attribute
self
c
eval("label")
c
label
c
order.additional_tax_total 
order.additional_tax_total
eval("source").calculator.type == "Spree::Calculator::TaxjarCalculator"
eval("source").calculator
eval("source")
eval(:source)
eval(source)
eval(source_
source
adjustable
source_type
source
calculator
self
c
self
c
@order
self
c
label
@order
c
label
c
adjustments.first.order.additional_tax_total
adjustments
c
label
c
adjustments.first.source.calculator
adjustments.first.source.calculator.tax_rate
adjustments.first.source.calculator
adjustments.first.source
adjustments.first
adjustments
label
c
adjustments.first.order.additional_tax_total
adjustments.first.order.additional_tax_total.to_f
adjustments.first.order.additional_tax_total.to_
adjustments.first.order.additional_tax_total
adjustments.first.order.amount
adjustments.first.order
adjustments.first.source.calculator
adjustments.first.source
adjustments.first
adjustments.first.tax_rate
adjustments.first
adjustments.first.calculator
adjustments.calculator
adjustments
label
label.class
label.calculator
label
self.class.class
self.class
self
slef
label
Spree::TaxRate.first.calculator
Spree::TaxRate.first
Spree::TaxRate.all.count
Spree::TaxRate
Spree::TaxCalculator
order.all_adjustments.nonzero.tax.eligible
ordorder.all_adjustments.nonzero.tax.eligible
label
c
(@order.additional_tax_total/@order.amount).to_f
(@order.additional_tax_total/@order.amount)
@order.additional_tax_total/@order.amount
@order.additional_tax_total
@order.additional_tax_amount
taxjar_api_advanced_res
cache_response call
cache_response
c
(@order.additional_tax_total/ @order.amount).to_f * 100
(@order.additional_tax_total/ @order.amount).to_f
@order.additional_tax_total/ @order.amount
@order.amount.to_
@order.amount
@order.additional_tax_total/ @order.amount
@order.additional_tax_total
@order.additional_tax_tota
@order.additional_tax_amount
@order
c
round_to_two_places
BigDecimal.new(a.to_s).round(2, BigDecimal::ROUND_HALF_UP).to_f
BigDecimal.new(a.to_s).round(2, BigDecimal::ROUND_HALF_UP)
a = ((@order.additional_tax_total* 100)/@order.amount).to_f
a = _
((@order.additional_tax_total* 100)/@order.amount).to_f
((@order.additional_tax_total* 100)/@order.amount).to_f(2)
((@order.additional_tax_total* 100)/@order.amount).to_f
(@order.additional_tax_total* 100)/@order.amount
(@order.additional_tax_total.to_f * 100)/@order.amount
@order.additional_tax_total.to_f
@order.additional_tax_total
line_item_params
transaction_parameters[:line_item_params]
transaction_parameters
tax_params[:amount].to_f
tax_params[:amount].to_i
tax_params[:amount]
tax_params.amount
tax_params
@state
@order.state_tax
Spree::Order
@order.tax
@order
@client.order
@client
@clinet
c
